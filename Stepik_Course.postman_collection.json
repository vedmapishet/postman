{
	"info": {
		"_postman_id": "3dcc9cbe-a0f5-4945-8cfa-bd355087daaa",
		"name": "Stepik_Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17666624",
		"_collection_link": "https://dark-eclipse-656774.postman.co/workspace/dark-eclipse-656774-Workspace~550ae7f4-32b0-4a9a-87b6-b8ac6bed070f/collection/17666624-3dcc9cbe-a0f5-4945-8cfa-bd355087daaa?action=share&source=collection_link&creator=17666624"
	},
	"item": [
		{
			"name": "companies",
			"item": [
				{
					"name": "PM-1 CompaniesDefaultRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});\r",
									"let schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": \r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"company_id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"company_name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"company_status\": {\r",
									"              \"type\": \"string\",\r",
									"              \"enum\": [ \"ACTIVE\", \"CLOSED\", \"BANKRUPT\" ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"company_id\",\r",
									"            \"company_name\",\r",
									"            \"company_address\",\r",
									"            \"company_status\"\r",
									"          ]\r",
									"        }\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"total\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"total\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"meta\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-2 CompaniesWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
									"    pm.expect(pm.response.headers.get('Location')).to.eql('https://send-request.me/api/companies/');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://send-request.me/api/companies/",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"companies",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-3 CompaniesWithLimitAndOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let offset = parseInt(pm.request.url.query.idx(1).value);\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"})\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Verify offset\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(3);\r",
									"    pm.expect(DataJson.slice(-1)[0].company_id).to.eql(7);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?limit=5&offset=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-4 CompaniesWithstatusACTIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE&limit=3&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-5 CompaniesWithstatusCLOSED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=CLOSED&limit=3&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "CLOSED"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-6 CompaniesWithstatusBANKRUPT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=BANKRUPT&limit=3&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "BANKRUPT"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-7 CompaniesWithInvQueryStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ABC&limit=3&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ABC"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-8 CompaniesWithInvQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE&limit=-1&offset=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "-1"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-9 CompaniesWithStrQueryLimit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE&limit=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-10 CompaniesWithInvQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Verify query-params\", function () {\r",
									"    let limit = parseInt(pm.request.url.query.idx(0).value);\r",
									"    let offset = parseInt(pm.request.url.query.idx(1).value);\r",
									"    let metaLimit = pm.response.json().meta.limit;\r",
									"    let metaOffset = pm.response.json().meta.offset;\r",
									"\r",
									"    pm.expect(limit).to.eql(metaLimit);\r",
									"    pm.expect(offset).to.eql(metaOffset);\r",
									"})\r",
									"let DataJson = pm.response.json().data;\r",
									"pm.test(\"Verify offset\", function () {\r",
									"    pm.expect(DataJson[0].company_id).to.eql(1);\r",
									"    pm.expect(DataJson.slice(-1)[0].company_id).to.eql(7);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE&limit=3&offset=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-11 CompaniesWithStrQueryOffset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});\r",
									"pm.test(\"Len of JSON with default limit\", function() {\r",
									"    let companiesCount = pm.response.json().data.length;\r",
									"    pm.expect(companiesCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/?status=ACTIVE&limit=3&offset=abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								""
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "offset",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-12 CompanyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-13 CompanyByNonexId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/companies/8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-14 CompanyByIdLangRU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response when correct Accept-languege\", function() {\r",
									"    pm.expect(pm.response.json()).to.have.any.keys(\"description\", \"description_lang\")\r",
									"});\r",
									"\r",
									"if(pm.response.json().description_lang){\r",
									"    pm.test(\"description_lang === EN\", function() {\r",
									"        pm.expect(pm.response.json().description_lang[0].translation_lang).to.eql(\"EN\")}\r",
									"    )};\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "RU",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/companies/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"companies",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "PM-19 UsersWithoutSSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request by http\", function() {\r",
									"    pm.expect(pm.request.url.protocol).to.eql(\"http\")\r",
									"});\r",
									"pm.test(\"Headers is vaild\", function() {\r",
									"    pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://send-request.me/api/users",
							"protocol": "http",
							"host": [
								"send-request",
								"me"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-20 UserCreate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"user_id\", pm.response.json().user_id);\r",
									"pm.collectionVariables.set(\"last_name\", pm.response.json().last_name);\r",
									"pm.collectionVariables.set(\"company_id\", pm.response.json().company_id);\r",
									"pm.collectionVariables.set(\"first_name\", pm.response.json().first_name);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Pifagor\",\r\n  \"last_name\": \"Samosskiy\",\r\n  \"company_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-25 GetCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"variable_key\");\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"\r",
									" \r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"let schema={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"\r",
									"          \"properties\": {\r",
									"\r",
									"            \"first_name\": {\r",
									"\r",
									"              \"type\": \"string\", \r",
									"\r",
									"              \"enum\": [first_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"last_name\": {\r",
									"\r",
									"              \"type\": \"string\",\r",
									"\r",
									"              \"enum\": [last_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"company_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [company_id]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"user_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [user_id]\r",
									"\r",
									"            }\r",
									"\r",
									"          },\r",
									"\r",
									"          \"required\": [\r",
									"\r",
									"            \"last_name\",\r",
									"\r",
									"            \"user_id\"\r",
									"\r",
									"          ]\r",
									"\r",
									"};\r",
									"\r",
									" \r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-30 DeleteCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"variable_key\");\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"\r",
									" \r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"let schema={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"\r",
									"          \"properties\": {\r",
									"\r",
									"            \"first_name\": {\r",
									"\r",
									"              \"type\": \"string\", \r",
									"\r",
									"              \"enum\": [first_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"last_name\": {\r",
									"\r",
									"              \"type\": \"string\",\r",
									"\r",
									"              \"enum\": [last_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"company_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [company_id]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"user_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [user_id]\r",
									"\r",
									"            }\r",
									"\r",
									"          },\r",
									"\r",
									"          \"required\": [\r",
									"\r",
									"            \"last_name\",\r",
									"\r",
									"            \"user_id\"\r",
									"\r",
									"          ]\r",
									"\r",
									"};\r",
									"\r",
									" \r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PM-34 IssuesGetUserById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"variable_key\");\r",
									"\r",
									"let first_name = pm.collectionVariables.get(\"first_name\");\r",
									"\r",
									"let last_name = pm.collectionVariables.get(\"last_name\");\r",
									"\r",
									"let company_id = pm.collectionVariables.get(\"company_id\");\r",
									"\r",
									"let user_id = pm.collectionVariables.get(\"user_id\");\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Headers is valid\", function() {\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"\r",
									" \r",
									"\r",
									"pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive')\r",
									"\r",
									" \r",
									"\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"let schema={\r",
									"\r",
									"  \"type\": \"object\",\r",
									"\r",
									"          \"properties\": {\r",
									"\r",
									"            \"first_name\": {\r",
									"\r",
									"              \"type\": \"string\", \r",
									"\r",
									"              \"enum\": [first_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"last_name\": {\r",
									"\r",
									"              \"type\": \"string\",\r",
									"\r",
									"              \"enum\": [last_name]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"company_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [company_id]\r",
									"\r",
									"            },\r",
									"\r",
									"            \"user_id\": {\r",
									"\r",
									"              \"type\": \"integer\",\r",
									"\r",
									"              \"enum\": [user_id]\r",
									"\r",
									"            }\r",
									"\r",
									"          },\r",
									"\r",
									"          \"required\": [\r",
									"\r",
									"            \"last_name\",\r",
									"\r",
									"            \"user_id\"\r",
									"\r",
									"          ]\r",
									"\r",
									"};\r",
									"\r",
									" \r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/issues/users/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"issues",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "issues",
			"item": []
		}
	],
	"variable": [
		{
			"key": "first_name",
			"value": ""
		},
		{
			"key": "last_name",
			"value": ""
		},
		{
			"key": "company_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		}
	]
}